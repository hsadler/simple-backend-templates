basePath: /
definitions:
  models.Item:
    properties:
      created_at:
        example: "2021-01-01T00:00:00.000Z"
        format: date-time
        type: string
      id:
        example: 1
        format: int64
        type: integer
      name:
        example: foo
        format: string
        type: string
      price:
        example: 3.14
        format: float64
        type: number
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        type: string
    type: object
  models.ItemIn:
    properties:
      name:
        example: foo
        format: string
        type: string
      price:
        example: 3.14
        format: float64
        minimum: 0
        type: number
    required:
    - name
    type: object
  routes.CreateItemRequest:
    properties:
      data:
        $ref: '#/definitions/models.ItemIn'
    type: object
  routes.CreateItemResponse:
    properties:
      data:
        $ref: '#/definitions/models.Item'
      meta:
        $ref: '#/definitions/routes.CreateItemResponseMeta'
    type: object
  routes.CreateItemResponseMeta:
    properties:
      created:
        type: boolean
    type: object
  routes.GetItemResponse:
    properties:
      data:
        $ref: '#/definitions/models.Item'
      meta:
        type: object
    type: object
  routes.GetItemsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Item'
        type: array
      meta:
        type: object
    type: object
  routes.statusResponse:
    properties:
      status:
        example: ok
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: Example Go+Gin+pgx JSON API server.
  title: Example Server API
  version: "1"
paths:
  /api/items:
    get:
      consumes:
      - application/json
      description: Returns Items by ids. Only returns subset of Items found.
      parameters:
      - collectionFormat: multi
        description: Item IDs
        in: query
        items:
          type: integer
        name: item_ids
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/routes.GetItemsResponse'
            type: array
      summary: Get Items
      tags:
      - items
    post:
      consumes:
      - application/json
      description: Creates Item.
      parameters:
      - description: Create Item Request
        in: body
        name: createItemRequest
        required: true
        schema:
          $ref: '#/definitions/routes.CreateItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.CreateItemResponse'
        "409":
          description: Item already exists
          schema:
            type: string
      summary: Create Item
      tags:
      - items
  /api/items/{id}:
    get:
      description: Returns Item by id.
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.GetItemResponse'
        "404":
          description: Item not found
          schema:
            type: string
      summary: Get Item
      tags:
      - items
  /metrics:
    get:
      description: Returns Prometheus metrics.
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Metrics
      tags:
      - metrics
  /status:
    get:
      description: Returns `"ok"` if the server is up.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.statusResponse'
      summary: Status
      tags:
      - status
schemes:
- http
swagger: "2.0"
