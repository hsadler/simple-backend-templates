openapi: 3.0.3
info:
  title: Items API
  description: An example CRUD API for Items
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Local development server

paths:
  /ping:
    get:
      description: Check if the service is running.
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "pong"
                required:
                  - message
        'default':
          description: Unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

#   /items:
#     get:
#       summary: Get Items
#       description: Returns Items by ids. Only returns subset of Items found.
#       parameters:
#         - name: item_ids
#           in: query
#           description: Item IDs
#           required: true
#           schema:
#             type: array
#             items:
#               type: integer
#           style: form
#           explode: true
#       responses:
#         '200':
#           description: OK.
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/GetItemsResponse'
#         'default':
#           description: Unexpected error occurred.
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'
#     post:
#       description: Creates Item.
#       requestBody:
#         description: Item to create.
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/CreateItemRequest'
#       responses:
#         '201':
#           description: Created.
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/CreateItemResponse'
#         'default':
#           description: Unexpected error occurred.
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'

#   /items/all:
#     get:
#       summary: Get All Items
#       description: Returns all Items.
#       parameters:
#         - name: offset
#           in: query
#           description: Offset
#           required: true
#           schema:
#             type: integer
#             minimum: 0
#         - name: chunkSize
#           in: query
#           description: Chunk size
#           required: true
#           schema:
#             type: integer
#             minimum: 1
#             maximum: 20
#       responses:
#         '200':
#           description: OK.
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/GetItemsResponse'
#         'default':
#           description: Unexpected error occurred.
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'

#   /items/{id}:
#     get:
#       description: Returns Item by id.
#       parameters:
#         - name: id
#           in: path
#           description: Item ID
#           required: true
#           schema:
#             type: integer
#       responses:
#         '200':
#           description: OK.
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/GetItemResponse'
#         'default':
#           description: Unexpected error occurred.
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
#     Item:
#       type: object
#       properties:
#         id:
#           type: integer
#           format: int64
#           example: 1
#         uuid:
#           type: string
#           format: uuid
#           example: 550e8400-e29b-41d4-a716-446655440000
#         created_at:
#           type: string
#           format: date-time
#           example: 2021-01-01T00:00:00.000Z
#         name:
#           type: string
#           example: foo
#         price:
#           type: number
#           format: float
#           example: 3.14
#       required:
#         - id
#         - uuid
#         - created_at
#         - name
#         - price

#     ItemIn:
#       type: object
#       properties:
#         name:
#           type: string
#           example: foo
#         price:
#           type: number
#           format: float
#           example: 3.14
#           minimum: 0
#       required:
#         - name
#         - price

#     GetItemResponse:
#       type: object
#       properties:
#         data:
#           $ref: '#/components/schemas/Item'
#         meta:
#           type: object
#       required:
#         - data
#         - meta

#     GetItemsResponse:
#       type: object
#       properties:
#         data:
#           type: array
#           items:
#             $ref: '#/components/schemas/Item'
#         meta:
#           type: object
#       required:
#         - data
#         - meta

#     CreateItemRequest:
#       type: object
#       properties:
#         data:
#           $ref: '#/components/schemas/ItemIn'
#       required:
#         - data

#     CreateItemResponseMeta:
#       type: object
#       properties:
#         created:
#           type: boolean
#       required:
#         - created

#     CreateItemResponse:
#       type: object
#       properties:
#         data:
#           $ref: '#/components/schemas/Item'
#         meta:
#           $ref: '#/components/schemas/CreateItemResponseMeta'
#       required:
#         - data
#         - meta

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
      required:
        - error
