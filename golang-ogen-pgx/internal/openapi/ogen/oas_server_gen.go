// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ItemsAllGet implements GET /items/all operation.
	//
	// Returns all Items.
	//
	// GET /items/all
	ItemsAllGet(ctx context.Context, params ItemsAllGetParams) (*GetItemsResponse, error)
	// ItemsGet implements GET /items operation.
	//
	// Returns Items by ids. Only returns subset of Items found.
	//
	// GET /items
	ItemsGet(ctx context.Context, params ItemsGetParams) (*GetItemsResponse, error)
	// ItemsIDGet implements GET /items/{id} operation.
	//
	// Returns Item by id.
	//
	// GET /items/{id}
	ItemsIDGet(ctx context.Context, params ItemsIDGetParams) (*GetItemResponse, error)
	// ItemsPost implements POST /items operation.
	//
	// Creates Item.
	//
	// POST /items
	ItemsPost(ctx context.Context, req *CreateItemRequest) (*CreateItemResponse, error)
	// PingGet implements GET /ping operation.
	//
	// Check if the service is running.
	//
	// GET /ping
	PingGet(ctx context.Context) (*PingGetOK, error)
	// NewError creates *ErrorResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
